#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    routing_table = {}
    relations = {}
    sockets = {}
    ports = {}

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def convert_netmask_to_cidr(self, netmask):
        return sum(bin(int(x)).count('1') for x in netmask.split('.'))
    
    def find_longest_prefix_match_route(self, dest):
        dest_ip_binary = bin(int(''.join(format(int(octet), '08b') for octet in dest.split('.')), 2))

        longest_prefix = None
        longest_prefix_length = 0

        for cidr in self.routing_table.keys():
            network_addr, netmask_num = cidr.split("/")
            network_binary = bin(int(''.join(format(int(octet), '08b') for octet in network_addr.split('.')), 2))

            bits_in_common = 0
            for i in range(min(len(dest_ip_binary), len(network_binary))):
                if dest_ip_binary[i] == network_binary[i]:
                    bits_in_common += 1
                else:
                    break
        
            if bits_in_common > longest_prefix_length and bits_in_common >= int(netmask_num):
                longest_prefix = cidr
                longest_prefix_length = bits_in_common

        return longest_prefix

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        print("Sockets:", self.sockets)
        print("current routing table:", self.routing_table)
        #print('sending to network:', network)
        #print('sockets[network]:', self.sockets[network])
        #self.sockets[network].sendto(modified.encode('utf-8'), ('localhost', self.ports[network]))
        print("network:", network)
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def process_update(self, srcif, update_message):
        ip_and_netmask_cidr = update_message["msg"]["network"] + "/" + str(self.convert_netmask_to_cidr(update_message["msg"]["netmask"]))
        print("IP and Netmask Cidr:", ip_and_netmask_cidr)
        self.routing_table[ip_and_netmask_cidr] = {"localPref": update_message["msg"]["localpref"], "selfOrigin": update_message["msg"]["selfOrigin"], "origin": update_message["msg"]["origin"]}
        print("Routing table:", self.routing_table)
        #print('process_update update_message received:', update_message)
        sendout_message_test = {
            "src": self.our_addr(srcif),
            "dst": srcif,
            "type": "update",
            "msg":
            {
                "network": update_message["msg"]["network"],
                "netmask": update_message["msg"]["netmask"],
                #"localpref": update_message["msg"]["localpref"],
                #"selfOrigin": update_message["msg"]["selfOrigin"],
                # TODO - see if [0] is a problem and needs to be fixed
                "ASPath": [self.asn, update_message["msg"]["ASPath"][0]],
                #"origin": update_message["msg"]["origin"]     # Examples: [1] or [3, 4] or [1, 4, 3]
            }
        }
        #print("process_update sendout_message_test:", sendout_message_test)
        self.forward_update(srcif, sendout_message_test)
        '''
        for network, next_hop in update_message.items():
            print('in for loop - network:', network)
            print('in for loop - next_hop:', next_hop)
            self.routing_table[network] = (next_hop, self.ports[srcif])
            sendout_message = {
              "src": self.our_addr(srcif),        # Example: 172.65.0.2
              "dst":  srcif,   # Example: 172.65.0.1  Notice the final one, this will typically be the IP address of your router
              "type": "update",
              "msg":
              {
                "network":    update_message.get("network"),           # Example: 12.0.0.0
                "netmask":    update_message.get("netmask"),         # Example: 255.0.0.0
                "localpref":  update_message.get("localpref"),
                "selfOrigin": update_message.get("selfOrigin"),
                "ASPath":     [self.asn , update_message.get("ASPath")],
                #"origin":     "<IGP|EGP|UNK>",     # Examples: [1] or [3, 4] or [1, 4, 3]
              }
            }
        '''
        #print('sendout_message before sending:', sendout_message_test)
        #self.forward_update(srcif, sendout_message_test)
        #print("this is the routing table", self.routing_table)
        

    def forward_update(self, source, update_message):
        #print('kb source:', source)
        for neighbor in self.sockets.keys():
            print('kb neighbor:', neighbor)
            if neighbor != source:  # Don't send back to the source
                #print('kb if statement valid:')
                update_message['src'] = self.our_addr(neighbor)
                update_message['dst'] = neighbor
                self.send(neighbor, json.dumps(update_message))
                print(f"Forwarded update to neighbor {neighbor}")

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        print('srcif:', srcif)
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))

                # Check if the message is a route update
                msg = json.loads(msg)
                if msg.get("type") == "update":
                    #print('kb update message:', msg)
                    self.process_update(srcif, msg)
                elif msg.get("type") == "dump":
                    dumped_msg = json.dumps(self.routing_table)
                    #print('dumped_msg:', dumped_msg)
                    self.send(msg['src'], dumped_msg)
                elif msg["type"] == "data":
                    print("Message:", msg)
                    router_to_send_to = self.find_longest_prefix_match_route(msg["dst"])
                    if router_to_send_to is not None:
                        print("Router to send to: ", router_to_send_to)
                        self.send(router_to_send_to, msg)
                    else:
                        print("Couldn't find router to send to")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
