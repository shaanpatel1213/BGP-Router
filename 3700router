#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    routing_table = {}
    relations = {}
    sockets = {}
    ports = {}
    update_and_withdraw_messages = []

    def __init__(self, asn, connections):
        """Initialize the router with ASN and connections."""
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def convert_netmask_to_cidr(self, netmask):
        """Convert a netmask to CIDR notation."""
        return sum(bin(int(x)).count('1') for x in netmask.split('.'))

    def find_longest_prefix_match_route(self, dest):
        """Find the longest prefix match for a given destination."""
        # Convert the destination IP address to its binary representation
        dest_ip_binary = bin(int(''.join(format(int(octet), '08b') for octet in dest.split('.')), 2))

        # Initialize variables to keep track of the best matching network and its prefix length
        longest_prefix_network = None
        longest_prefix_length = 0

        # Iterate over all CIDR entries in the routing table
        for cidr in self.routing_table.keys():
            # Split each CIDR entry into network address and netmask length
            network_addr, netmask_num = cidr.split("/")
            # Convert the network address of the CIDR entry to binary
            network_binary = bin(int(''.join(format(int(octet), '08b') for octet in network_addr.split('.')), 2))

            # Initialize a counter for the number of matching bits from the start
            bits_in_common = 0

            # Compare each bit of the destination IP with the network address until they differ
            for i in range(min(len(dest_ip_binary), len(network_binary))):
                if dest_ip_binary[i] == network_binary[i]:
                    bits_in_common += 1
                else:
                    break

            # Update the longest match if the current one is longer and meets the netmask requirement
            if bits_in_common > longest_prefix_length and bits_in_common >= int(netmask_num):
                longest_prefix_network = cidr
                longest_prefix_length = bits_in_common

        # Return the CIDR of the network with the longest matching prefix
        return longest_prefix_network

    def same_attributes(self, tuple_1, tuple_2):
        i = 0
        while i < len(tuple_1):
            if tuple_1[i] != tuple_2[i]:
                return False
        return True
    
    def aggregate_table(self):
        print("Routing table before aggregation:", self.routing_table)
        # sort keys by ip in ascending order - allows for adjacent prefixes to be next to each other (and because they're in a list, we can use indices)
        sorted_keys = list(sorted(self.routing_table.keys()))
        print("sorted_keys:", sorted_keys)
        sorted_table = sorted(self.routing_table.items())

        aggregated_table = {}

        i = 0
        while i < len(sorted_keys):
            prefix_network, prefix_length = sorted_keys[i].split('/')
            prefix_network_as_binary = bin(int(''.join(format(int(octet), '08b') for octet in prefix_network.split('.')), 2))
            prefix_length = int(prefix_length)
            tuples = self.routing_table.get(sorted_keys[i])
            print("Tuples:", tuples)
            prefix_network_best_route = self.get_best_network(self.routing_table.get(sorted_keys[i]))

            j = i + 1
            while j < len(sorted_keys):
                next_prefix_network, next_prefix_length = sorted_keys[j].split('/')
                next_prefix_network_as_binary = bin(int(''.join(format(int(octet), '08b') for octet in next_prefix_network.split('.')), 2))
                next_prefix_length = int(next_prefix_length)
                next_prefix_network_best_route = self.get_best_network(self.routing_table.get(sorted_keys[j]))
                print("prefix_length:", prefix_length)
                print("next_prefix_length:", next_prefix_length)
                print("prefix_network_best_route[3]:", prefix_network_best_route[3])
                print("next_prefix_network_best_route[3]:", next_prefix_network_best_route[3])
                print("prefix_network_as_binary:", prefix_network_as_binary)
                print("next_prefix_network_as_binary:", next_prefix_network_as_binary)
                if (prefix_length == next_prefix_length) and prefix_network_best_route[3] == next_prefix_network_best_route[3] and self.same_attributes(prefix_network_best_route, next_prefix_network_best_route):
                    print("prefix lengths are the same, best routes are equal, and attributes are the same")
                    only_last_bit_differs = ((prefix_network_as_binary >> (32 - prefix_length)) ^ (next_prefix_network_as_binary >> (32 - next_prefix_length))) == 1
                    if only_last_bit_differs:
                        print("only last bit differs!")
                        aggregated_prefix = f'{prefix_network}/{prefix_length - 1}'
                        
                        if not isinstance(aggregated_table[aggregated_prefix], list):
                            aggregated_table[aggregated_prefix] = []
                        aggregated_table[aggregated_prefix].append(prefix_network_best_route)
                        i = j + 1
                    else:
                        print("last bit differed")
                        break
                else:
                    print("first if didn't go through")
                    break
            
            if sorted_keys[i] not in aggregated_table.keys():
                print("Adding directly to aggregated table without coalescing:", prefix_network_best_route)
                aggregated_table[sorted_keys[i]] = []
                aggregated_table[sorted_keys[i]].append(prefix_network_best_route)
            
            i = i + 1
       
        print("Aggregated Table:", aggregated_table)
        return aggregated_table
        



        
            







        

    def our_addr(self, dst):
        """Generate an IP address for the router based on the destination."""
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        """Send a message to a network."""
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def process_update(self, srcif, update_message):
        """Process an update message from a neighbor."""
        # Record the update message for potential future use or logging
        self.update_and_withdraw_messages.append(update_message)

        # Construct the CIDR notation for the network from the update message
        ip_and_netmask_cidr = update_message["msg"]["network"] + "/" + str(
            self.convert_netmask_to_cidr(update_message["msg"]["netmask"]))

        # Create a tuple representing the new routing information to be stored in the routing table
        new_entry = (
            update_message["msg"]["localpref"],  # Local preference value
            update_message["msg"]["selfOrigin"],  # Whether the route originated from this AS
            update_message["msg"]["origin"],  # Origin type (IGP, EGP, Incomplete)
            update_message["src"],  # Source of the update
            update_message["msg"]["ASPath"],  # AS Path
            update_message["msg"]["network"],  # Network address
            update_message["msg"]["netmask"]  # Netmask
        )

        # Retrieve the current list of routes for the given CIDR, if it exists
        value_list = self.routing_table.get(ip_and_netmask_cidr)

        # If there's no entry for this CIDR in the routing table, initialize an empty list
        if value_list is None or not isinstance(self.routing_table[ip_and_netmask_cidr], list):
            self.routing_table[ip_and_netmask_cidr] = []

        # Add the new routing information to the routing table for the given CIDR
        self.routing_table[ip_and_netmask_cidr].append(new_entry)

        self.routing_table = self.aggregate_table()
        print("Routing table:", self.routing_table)

        # Prepare an update message to be sent out to other neighbors, adding this router's ASN to the AS path
        sendout_message_test = {
            "src": self.our_addr(srcif),  # The router's address on the interface connected to the source
            "dst": srcif,  # The source of the received update message
            "type": "update",
            "msg": {
                "network": update_message["msg"]["network"],  # Network address from the received update
                "netmask": update_message["msg"]["netmask"],  # Netmask from the received update
                "ASPath": [self.asn] + update_message["msg"]["ASPath"]
                # Prepend this router's ASN to the received AS path
            }
        }

        # Forward the updated message to appropriate neighbors based on routing policies
        self.forward_update(srcif, sendout_message_test)
        #self.routing_table = self.aggregate_table()
        print("Routing table:", self.routing_table)
        '''
        for network, next_hop in update_message.items():
            print('in for loop - network:', network)
            print('in for loop - next_hop:', next_hop)
            self.routing_table[network] = (next_hop, self.ports[srcif])
            sendout_message = {
              "src": self.our_addr(srcif),        # Example: 172.65.0.2
              "dst":  srcif,   # Example: 172.65.0.1  Notice the final one, this will typically be the IP address of your router
              "type": "update",
              "msg":
              {
                "network":    update_message.get("network"),           # Example: 12.0.0.0
                "netmask":    update_message.get("netmask"),         # Example: 255.0.0.0
                "localpref":  update_message.get("localpref"),
                "selfOrigin": update_message.get("selfOrigin"),
                "ASPath":     [self.asn , update_message.get("ASPath")],
                #"origin":     "<IGP|EGP|UNK>",     # Examples: [1] or [3, 4] or [1, 4, 3]
              }
            }
        '''
        #print('sendout_message before sending:', sendout_message_test)
        #self.forward_update(srcif, sendout_message_test)
        #print("this is the routing table", self.routing_table)        

    def forward_update(self, source, update_message):
        """Forward an update message to appropriate neighbors based on the relationship with the source."""
        # If the source of the update is a customer, forward the update to all neighbors except the source
        if self.relations[source] == "cust":
            for neighbor in self.sockets.keys():
                if neighbor != source:  # Avoid sending the update back to the source
                    update_message['src'] = self.our_addr(neighbor)  # Set the source address for the outgoing message
                    update_message['dst'] = neighbor  # Set the destination of the update
                    self.send(neighbor, json.dumps(update_message))  # Send the update message
        else:
            # If the source is not a customer, only forward the update to neighbors that are customers
            for neighbor in self.sockets.keys():
                if neighbor != source and self.relations[neighbor] == "cust":
                    update_message['src'] = self.our_addr(neighbor)
                    update_message['dst'] = neighbor
                    self.send(neighbor, json.dumps(update_message))

    def process_dump(self, dst):
        """Send the current routing table to a neighbor."""
        routing_table_entries = []  # Initialize a list to store routing table entries

        # Convert routing table entries to a list of dictionaries for easy JSON serialization
        for value_list in self.routing_table.values():
            for value_tuple in value_list:
                table_as_dict = {
                    "network": value_tuple[5],  # Network address
                    "netmask": value_tuple[6],  # Netmask
                    "peer": value_tuple[3],  # Peer IP address
                    "localpref": value_tuple[0],  # Local preference
                    "ASPath": value_tuple[4],  # AS path
                    "selfOrigin": value_tuple[1],  # Whether the route originated from this AS
                    "origin": value_tuple[2]  # Origin attribute (IGP, EGP, Incomplete)
                }
                routing_table_entries.append(table_as_dict)  # Add the dictionary to the list of entries

        # Prepare the message containing the routing table
        table_msg = {
            "src": self.our_addr(dst),  # The router's address on the interface connected to the destination
            "dst": dst,  # The destination of the dump message
            "type": "table",  # Indicate that this message is a table dump
            "msg": routing_table_entries  # The routing table entries
        }

        self.send(dst, json.dumps(table_msg))  # Send the routing table dump to the specified destination

    def get_highest_localpref_networks(self, tuple_list):
        """Identify networks with the highest local preference from a list of route tuples."""
        highest_local_prefs = []  # Stores tuples with the highest local preference
        highest_local_pref_value = -1  # Tracks the highest local preference value found

        # Iterate over each tuple to find the highest local preference
        for value_tuple in tuple_list:
            # Compare the localpref value of the current tuple with the highest value found so far
            if value_tuple[0] > highest_local_pref_value:
                highest_local_prefs.clear()  # Clear the list as a new highest value is found
                highest_local_prefs.append(value_tuple)  # Add the current tuple to the list
                highest_local_pref_value = value_tuple[0]  # Update the highest local preference value
            elif value_tuple[0] == highest_local_pref_value:
                highest_local_prefs.append(value_tuple)  # Add the tuple to the list if it matches the highest value

        return highest_local_prefs

    def get_true_selfOrigin_networks(self, tuple_list):
        # Initialize lists to separate routes based on whether they originated from this AS
        selfOrigin_false = []  # Routes not originated from this AS
        selfOrigin_true = []  # Routes that are self-originated

        # Iterate through the list of route tuples
        for value_tuple in tuple_list:
            # The second element in the tuple indicates if the route is self-originated
            if value_tuple[1]:
                selfOrigin_true.append(value_tuple)  # Add to self-originated list if true
            else:
                selfOrigin_false.append(value_tuple)  # Otherwise, add to the non-self-originated list

        # If there are any self-originated routes, return them
        if len(selfOrigin_true) > 0:
            return selfOrigin_true
        # If there are no self-originated routes, return the non-self-originated ones
        else:
            return selfOrigin_false

    def get_shortest_ASPath_networks(self, tuple_list):
        """Identify networks with the shortest AS Path from a list of route tuples."""
        shortest_ASPath_networks = []  # Stores tuples with the shortest AS Path
        shortest_ASPath_length = float("inf")  # Tracks the shortest AS Path length found

        # Iterate over each tuple to find the shortest AS Path
        for value_tuple in tuple_list:
            if len(value_tuple[4]) < shortest_ASPath_length:
                shortest_ASPath_networks.clear()  # Clear the list as a new shortest length is found
                shortest_ASPath_networks.append(value_tuple)  # Add the current tuple to the list
                shortest_ASPath_length = len(value_tuple[4])  # Update the shortest AS Path length
            elif len(value_tuple[4]) == shortest_ASPath_length:
                shortest_ASPath_networks.append(
                    value_tuple)  # Add the tuple to the list if it matches the shortest length

        return shortest_ASPath_networks

    def origin_priority(self, origin):
        """Assign a priority to a route origin type."""
        priority = {"IGP": 3, "EGP": 2, "UNK": 1}  # Define the priority for each origin type
        return priority.get(origin, 0)  # Return the priority, default to 0 if origin type is not found

    def get_best_origin_networks(self, tuple_list):
        """Identify networks with the best origin type based on a predefined priority."""
        igp_list, egp_list, unk_list = [], [], []  # Lists to store tuples based on origin type

        # Categorize each tuple based on its origin type
        for value_tuple in tuple_list:
            if value_tuple[2] == "IGP":
                igp_list.append(value_tuple)
            elif value_tuple[2] == "EGP":
                egp_list.append(value_tuple)
            elif value_tuple[2] == "UNK":
                unk_list.append(value_tuple)

        # Return the list with the highest priority origin type that is not empty
        if len(igp_list) > 0:
            return igp_list
        elif len(egp_list) > 0:
            return egp_list
        else:
            return unk_list

    def get_lowest_ip_network(self, tuple_list):
        """
        Identify the network(s) with the lowest IP address from a list of route tuples.
        """
        lowest_ip_networks = []  # Stores tuples with the lowest IP addresses
        lowest = float("inf")  # Initialize with infinity as the highest possible value

        # Iterate over each tuple to find the one with the lowest IP address
        for value_tuple in tuple_list:
            # Convert the IP address from string to an integer for comparison
            current_ip_as_int = int(value_tuple[3].replace('.', ''))

            # Check if the current IP is lower than the lowest found so far
            if current_ip_as_int < lowest:
                lowest_ip_networks.clear()  # Clear the list for a new lowest IP
                lowest_ip_networks.append(value_tuple)  # Add the current tuple
                lowest = current_ip_as_int  # Update the lowest IP value
            elif current_ip_as_int == lowest:
                lowest_ip_networks.append(value_tuple)  # Add the tuple if it matches the current lowest IP

        return lowest_ip_networks  # Return the list of tuples with the lowest IP addresses

    def get_best_network(self, tuples):
        """
        Determine the best network from a list of route tuples based on multiple criteria.
        """
        # First, apply the highest local preference tie-break
        localpref_tie_break = self.get_highest_localpref_networks(tuples)
        if len(localpref_tie_break) == 1:
            return localpref_tie_break[0]  # Return if only one network remains

        # Apply the self-originated tie-break
        selforigin_tie_break = self.get_true_selfOrigin_networks(localpref_tie_break)
        if len(selforigin_tie_break) == 1:
            return selforigin_tie_break[0]  # Return if only one network remains

        # Apply the shortest AS path tie-break
        shortest_aspath_tie_break = self.get_shortest_ASPath_networks(selforigin_tie_break)
        if len(shortest_aspath_tie_break) == 1:
            return shortest_aspath_tie_break[0]  # Return if only one network remains

        # Apply the best origin type tie-break
        best_origin_tie_break = self.get_best_origin_networks(shortest_aspath_tie_break)
        if len(best_origin_tie_break) == 1:
            return best_origin_tie_break[0]  # Return if only one network remains

        # Finally, apply the lowest IP address tie-break
        lowest_ip_networks = self.get_lowest_ip_network(best_origin_tie_break)
        if len(lowest_ip_networks) != 1:
            return None  # Return None if tie-breaking fails to identify a single best network

        return lowest_ip_networks[0]  # Return the best network based on the applied criteria

    def send_data_msg(self, srcif, msg):
        # Find the longest prefix match for the destination IP address
        cidr_addr = self.find_longest_prefix_match_route(msg["dst"])
        # If no route is found in the routing table, send a 'no route' message
        if cidr_addr not in self.routing_table:
            self.no_route(srcif)
        elif len(self.routing_table[cidr_addr]) == 1:
            # If only one route is found, check the relationship with the destination router
            dst_router = self.routing_table[cidr_addr][0][3]
            # If both routers are peers or providers, send a 'no route' message
            if (self.relations.get(srcif) in ["peer", "prov"]) and (self.relations.get(dst_router) in ["peer", "prov"]):
                self.no_route(srcif)
            # If either router is a customer, forward the message
            elif self.relations.get(srcif) == "cust" or self.relations.get(dst_router) == "cust":
                router_to_send_to = self.routing_table[cidr_addr][0][3]
                self.send(router_to_send_to, json.dumps(msg))
        else:
            # If multiple routes are found, determine the best network based on routing policies
            tuple_list = self.routing_table[cidr_addr]
            best_network = self.get_best_network(tuple_list)
            router_to_send_to = best_network[3]  # The 'peer' field from the best route tuple
            # If both routers are peers or providers, send a 'no route' message
            if (self.relations.get(srcif) in ["peer", "prov"]) and (
                    self.relations.get(router_to_send_to) in ["peer", "prov"]):
                self.no_route(srcif)
            # If either router is a customer, forward the message
            elif self.relations.get(srcif) == "cust" or self.relations.get(router_to_send_to) == "cust":
                self.send(router_to_send_to, json.dumps(msg))

    def run(self):
        # Main loop to listen for incoming messages on all socket connections
        while True:
            # Use select to wait for incoming data on any socket with a timeout of 0.1 seconds
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:  # Iterate over sockets that have data
                k, addr = conn.recvfrom(65535)  # Receive data from the socket
                srcif = None  # Initialize source interface variable
                # Identify which socket received the data to find the corresponding source interface
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')  # Decode the received data from bytes to string

                # Deserialize the JSON string to a Python dictionary
                msg = json.loads(msg)
                # Process the message based on its type
                if msg.get("type") == "update":
                    print("running process_update(", srcif, " , ", msg, ")")
                    self.process_update(srcif, msg)  # Process routing update messages
                elif msg.get("type") == "dump":
                    self.process_dump(msg['src'])  # Process dump requests
                elif msg["type"] == "withdraw":
                    self.process_withdraw(srcif, msg)  # Process route withdrawal messages
                elif msg["type"] == "data":
                    self.send_data_msg(srcif, msg)  # Process data messages

    def process_withdraw(self, srcif, msg):
        # Add the withdrawal message to a list for logging or future use
        self.update_and_withdraw_messages.append(msg)
        # Iterate over each route withdrawal request in the message
        for remove_entry in msg["msg"]:
            # Construct the CIDR notation for the route to be removed
            ip_and_netmask_cidr = remove_entry["network"] + "/" + str(
                self.convert_netmask_to_cidr(remove_entry["netmask"]))
            # Remove the specified route from the routing table
            for i in range(len(self.routing_table[ip_and_netmask_cidr]) - 1):
                if self.routing_table[ip_and_netmask_cidr][i][3] == srcif:
                    self.routing_table[ip_and_netmask_cidr].pop(i)
                    break

        # Create a forward message to propagate the withdrawal
        forward_message = {
            "src": self.our_addr(srcif),  # The router's own address as the source
            "dst": srcif,  # The source interface as the destination (for routing purposes)
            "type": "withdraw",
            "msg": msg["msg"]  # The withdrawal message payload
        }
        # Forward the withdrawal message to other routers as necessary
        self.forward_update(srcif, forward_message)
        self.routing_table = self.aggregate_table()
        print("Routing table:", self.routing_table)

    def no_route(self, srcif):
        # Construct a 'no route' message indicating the lack of a route to the destination
        themsg = {
            "src": self.our_addr(srcif),  # The router's own address as the source
            "dst": srcif,  # The source interface as the destination
            "type": "no route",  # Message type indicating no route is available
            "msg": {}  # Empty payload for 'no route' messages
        }
        # Send the 'no route' message to the source interface
        self.send(srcif, json.dumps(themsg))



if __name__ == "__main__":
    # Parse command line arguments to configure the router
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    # Instantiate the router with the provided AS number and connections, then run it
    router = Router(args.asn, args.connections)
    router.run()
